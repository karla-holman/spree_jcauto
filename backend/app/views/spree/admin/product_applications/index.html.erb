<%= render 'spree/admin/shared/product_tabs', current: :applications %>
<%= render 'spree/admin/shared/error_messages', target: @product %>

<% content_for :page_actions do %>
  <%= button_link_to(Spree.t(:add_product_applications), "javascript:;", { icon: 'add', :'data-target' => "tbody#product_properties", class: 'btn-success spree_add_fields' }) %>
  <span class="js-new-ptype-link"><%= button_link_to Spree.t(:select_from_prototype), available_admin_prototypes_url, { icon: 'properties', remote: true, 'data-update' => 'prototypes', class: 'btn-default' } %></span>
<% end if can? :create, Spree::Application %>
<!--% @application = Spree::Application.new %-->
<%= form_for @product, url: spree.admin_product_url(@product), method: :put do |f| %>
  <h3> Edit Applications </h3>
  <fieldset>
    <div id="prototypes" data-hook></div>

    <!--table class="table sortable" data-hook data-sortable-link="<%= update_positions_admin_product_product_properties_url %>"-->
    <table class="table">
      <thead>
        <tr data-hook="product_properties_header">
          <th><%= Spree.t(:make_and_model) %></th>
          <th><%= Spree.t(:notes) %></th>
          <th><%= Spree.t(:start_year) %></th>
          <th><%= Spree.t(:end_year) %></th>
          <th class="actions"></th>
        </tr>
      </thead>
      <tbody id="product_applications">
        <%= f.fields_for :product_applications do |apps_form| %>
          <tr>
            <td>
              <%= apps_form.text_field :application_name, class: 'autocomplete form-control' %>
              <!-- %= f.collection_select :brand_id, Spree::Brand.order(:name), :id, :name, :prompt => "Select a brand" %-->
            </td>
            <td>
              <%= apps_form.text_field :notes, class: 'form-control' %>
              <!-- %= f.collection_select :brand_id, Spree::Brand.order(:name), :id, :name, :prompt => "Select a brand" %-->
            </td>
            <td>
              <%= apps_form.text_field :start_year, class: 'datecomplete form-control' %>
              <!-- %= f.date_select :start_year, :order => [:year], :start_year => 1900, :end_year => Time.now.year, :prompt => {:year => "Select year"} %-->
            </td>
            <td>
              <%= apps_form.text_field :end_year, class: 'datecomplete form-control' %>
              <!--%= f.date_select :end_year, :order => [:year], :start_year => 1900, :end_year => Time.now.year, :prompt => {:year => "Select year"} %-->
            </td>
            <td class="actions actions-1">
              <% if apps_form.object.persisted? && can?(:destroy, apps_form.object) %>
                <%= link_to_delete apps_form.object, no_text: true %>
              <% end %>
            </td>
          </tr>
        <% end %>
      </tbody>
    </table>

    <%= render('spree/admin/shared/edit_resource_links') if can? :update, Spree::ProductApplication %>

    <%= hidden_field_tag 'clear_product_properties', 'true' %>
  </fieldset>
<% end %>

<script>
  var applications = <%= raw(@applications.to_json) %>;
  //console.log(applications);
  $('#product_applications').on('keydown', 'input.autocomplete', function() {
    console.log("Auto");
    already_auto_completed = $(this).is('ac_input');
    if (!already_auto_completed) {
      $(this).autocomplete({source: applications});
      $(this).focus();
    }
  });

  // Create hash to track start and end years
  var starts = new Object();  // track each model's start year
  var ends = new Object();    // track each model's end year
  var models = <%= raw(@models.to_json) %>
  var model = "";

  // get all years
  <% @models.each do |model| %>
      starts["<%= model.make.name + ' ' + model.name %>"] = "<%= model.start_year %>";
      ends["<%= model.make.name + ' ' + model.name %>"] = "<%= model.end_year %>";
  <% end %>

  // Add default list for no model
  starts[""] = 1900;
  ends[""] = new Date().getFullYear();

  // Autocomplete with list of years
  $('#product_applications').on('keydown', 'input.datecomplete', function() {

    // Get value of #product_applications sibling input > tr > td > input
    $first = $(this).parents('tr').children().first().children().first();
    model = $first.val();

    if (model in starts && model in ends){
      // console.log("Found model " + model);
      // model exists, do nothing
    } else {
      //console.log("No model, setting to empty string");
      model = "";
    }

    var years = []; // Array of years to display for autocomplete
    var count = 0;

    // loop through years and add to autocomplete list
    for(i = starts[model]; i <= ends[model]; i++) {
      years[count] = i.toString();
      count++;
    }

    already_auto_completed = $(this).is('ac_input');
    if (!already_auto_completed) {
      $(this).autocomplete({source: years});
      $(this).focus();
    }
  });
</script>